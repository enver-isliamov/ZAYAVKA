const telegramBotToken = "7134836219:AAFOKRDl_f7_nft2Q52UxXFx244Gpqs7DPs";
const chatId = "96609347";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculateTotal() {
    const monthlyPrice = document.getElementById('monthlyPrice').value;
    const tireCount = document.getElementById('tireCount').value;
    const totalPrice = monthlyPrice * tireCount;
    document.getElementById('totalPrice').value = totalPrice;
    generateQRCode();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
function generateContractNumber() {
    const currentDate = new Date();
    const year = currentDate.getFullYear().toString().slice(-2); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞
    const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
    const day = String(currentDate.getDate()).padStart(2, '0'); // –î–µ–Ω—å —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
    const hour = String(currentDate.getHours()).padStart(2, '0'); // –ß–∞—Å—ã —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
    const minute = String(currentDate.getMinutes()).padStart(2, '0'); // –ú–∏–Ω—É—Ç—ã —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
    return `${year}.${month}.${day}-${hour}${minute}`; // –§–æ—Ä–º–∞—Ç: –ì–ì.–ú–ú.–î–î-–ß–ß–ú–ú
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
const today = new Date();
const formattedDate = today.toISOString().split('T')[0];
document.getElementById('startDate').value = formattedDate;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç
function calculateDate() {
    const tireCount = parseInt(document.getElementById('tireCount').value);
    const startDate = new Date(document.getElementById('startDate').value);
    const endDate = new Date(startDate);
    endDate.setMonth(startDate.getMonth() + tireCount);
    document.getElementById('endDate').value = endDate.toISOString().split('T')[0];

    const reminderDate = new Date(endDate);
    reminderDate.setDate(endDate.getDate() - 7);
    document.getElementById('reminderDate').value = reminderDate.toISOString().split('T')[0];
    generateQRCode();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
function generateQRCode() {
    const clientName = document.getElementById('clientName').value;
    const phone = document.getElementById('phone').value;
    const order = document.getElementById('order').value;
    const monthlyPrice = document.getElementById('monthlyPrice').value;
    const tireCount = document.getElementById('tireCount').value;
    const hasDisk = document.getElementById('hasDisk').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const reminderDate = document.getElementById('reminderDate').value;
    const storage = document.getElementById('storage').value;
    const sezon = document.getElementById('seZon').value;
    const totalPrice = document.getElementById('totalPrice').value;
    const contractNumber = generateContractNumber();
    const trafficSource = document.getElementById('trafficSource').value;

    document.getElementById('contractNumber').value = contractNumber;

    const noteText = `
‚ù±‚ù±‚ù±‚ù±‚ù± ‚úÖ –ö–õ–ò–ï–ù–¢ Otelshin.tu ‚úÖ ‚ù∞‚ù∞‚ù∞‚ù∞‚ù∞

${clientName} 
üìû${phone}

–ú–∞—Ä–∫–∞:‚ù±‚ù± ${order}
‚≠ï: ‚ù±‚ù± ${hasDisk} ‚ù±‚ù± [${sezon}]

‚ö°–•—Ä–∞–Ω–µ–Ω–∏–µ: [${tireCount}–º–µ—Å. ‚ù± ${startDate} ‚ûΩ ${endDate}
---------------
üí≥ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalPrice} ${monthlyPrice}—Ä/–º–µ—Å.]
‚òéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞: ${reminderDate} üìû
---------------
–î–æ–≥–æ–≤–æ—Ä: ${contractNumber} (–Ω–∞ —Å–∞–π—Ç–µ Otelshin.tu) | –°–∫–ª–∞–¥: ${storage}
–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞: ${trafficSource}
    `;

    const vCardData = `
BEGIN:VCARD
VERSION:3.0
N:${clientName};;;;
FN:${clientName}
TEL:${phone}
NOTE:${noteText.replace(/\n/g, '\\n')}
END:VCARD
    `.trim();

    const qrCanvas = document.getElementById('qrCanvas');
    qrCanvas.width = 300;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–Ω–≤–∞—Å–∞
    qrCanvas.height = 300; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–∞–Ω–≤–∞—Å–∞

    QRCode.toCanvas(qrCanvas, vCardData, { width: 300 }, (error) => {
        if (error) console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", error);
    });

    document.getElementById('qrContent').textContent = noteText;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
function sendToTelegram() {
    const clientName = document.getElementById('clientName').value;
    const phone = document.getElementById('phone').value;
    const order = document.getElementById('order').value;
    const monthlyPrice = document.getElementById('monthlyPrice').value;
    const tireCount = document.getElementById('tireCount').value;
    const hasDisk = document.getElementById('hasDisk').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const reminderDate = document.getElementById('reminderDate').value;
    const storage = document.getElementById('storage').value;
    const sezon = document.getElementById('seZon').value;
    const totalPrice = document.getElementById('totalPrice').value;
    const contractNumber = document.getElementById('contractNumber').value;
    const trafficSource = document.getElementById('trafficSource').value;

    const message = `
‚ù±‚ù±‚ù±‚ù±‚ù± ‚úÖ –ö–õ–ò–ï–ù–¢ Otelshin.tu ‚úÖ ‚ù∞‚ù∞‚ù∞‚ù∞‚ù∞

${clientName} 
üìû${phone}

–ú–∞—Ä–∫–∞:‚ù±‚ù± ${order}
‚≠ï: ‚ù±‚ù± ${hasDisk} ‚ù±‚ù± [${sezon}]

‚ö°–•—Ä–∞–Ω–µ–Ω–∏–µ: [${tireCount}–º–µ—Å. ‚ù± ${startDate} ‚ûΩ ${endDate}
---------------
üí≥ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalPrice} ${monthlyPrice}—Ä/–º–µ—Å.]
‚òéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞: ${reminderDate} üìû
---------------
–î–æ–≥–æ–≤–æ—Ä: ${contractNumber} (–Ω–∞ —Å–∞–π—Ç–µ Otelshin.tu) | –°–∫–ª–∞–¥: ${storage}
–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞: ${trafficSource}
    `;

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è QR-–∫–æ–¥–∞ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const tempQrCanvas = document.createElement('canvas');
    tempQrCanvas.width = 500;
    tempQrCanvas.height = 500;

    const vCardData = `
BEGIN:VCARD
VERSION:3.0
N:${clientName};;;;
FN:${clientName}
TEL:${phone}
NOTE:${message.replace(/\n/g, '\\n')}
END:VCARD
    `.trim();

    QRCode.toCanvas(tempQrCanvas, vCardData, { width: 500 }, (error) => {
        if (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", error);
            return;
        }

        const dataURL = tempQrCanvas.toDataURL('image/png');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        sendImageWithCaption(dataURL, message)
            .then(() => {
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                updateGoogleSheet(clientName, phone, order, hasDisk, sezon, 
                    tireCount, startDate, endDate, totalPrice, monthlyPrice, 
                    reminderDate, contractNumber, storage, trafficSource);
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞ –≤ Telegram.');
            });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram
async function sendImageWithCaption(dataURL, caption) {
    return fetch(dataURL)
        .then(res => res.blob())
        .then(blob => {
            const formData = new FormData();
            formData.append('chat_id', chatId); // –í–ê–ñ–ù–û: –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à chat_id
            formData.append('photo', blob, 'qrcode.png');
            formData.append('caption', caption);

            return fetch(`https://api.telegram.org/bot${telegramBotToken}/sendPhoto`, { // –í–ê–ñ–ù–û: –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à bot token
                method: 'POST',
                body: formData
            });
        })
        .then(response => response.json())
        .then(data => {
            if (data.ok) {
                alert('QR-–∫–æ–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
                return true;
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞ –≤ Telegram: ' + data.description);
                return false;
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞ –≤ Telegram.');
            return false;
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
async function updateGoogleSheet(clientName, phone, order, hasDisk, sezon, 
    tireCount, startDate, endDate, totalPrice, monthlyPrice, 
    reminderDate, contractNumber, storage, trafficSource) {
    
    // –í–ê–ñ–ù–û: –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
    const SHEET_ID = '1QwNDSkkpDp1kBW9H1C3v1gdvlrHc2OS4WR8HVOXZKh0'; // –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ URL —Ç–∞–±–ª–∏—Ü—ã
    const API_KEY = 'AIzaSyBWBa0hhrcGx6rESZeLCXZ7-73U4lJAR0E'; // –ü–æ–ª—É—á–∏—Ç—å –≤ Google Cloud Console
    const RANGE = '–ë–∞–∑–∞!A2:K100'; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞/–∑–∞–ø–∏—Å–∏
    
    try {
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const searchResponse = await fetch(
            `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values:search?key=${API_KEY}`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    range: RANGE,
                    valueRenderOption: 'UNFORMATTED_VALUE',
                    valueInputOption: 'USER_ENTERED',
                    searchBody: {
                        location: {
                            sheetId: 0,
                            dimension: 'ROWS'
                        },
                        query: `${clientName} üìû${phone}`
                    }
                })
            }
        );

        const searchData = await searchResponse.json();
        
        if (searchData.includedRange) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            const updateResponse = await fetch(
                `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`,
                {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        majorDimension: 'ROWS',
                        values: [
                            [
                                clientName,
                                phone,
                                order,
                                hasDisk,
                                sezon,
                                tireCount,
                                startDate,
                                endDate,
                                totalPrice,
                                monthlyPrice,
                                reminderDate,
                                contractNumber,
                                storage,
                                trafficSource
                            ]
                        ]
                    })
                }
            );
            
            if (updateResponse.ok) {
                console.log('–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', await updateResponse.text());
            }
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            const appendResponse = await fetch(
                `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}:append?key=${API_KEY}`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        majorDimension: 'ROWS',
                        values: [
                            [
                                clientName,
                                phone,
                                order,
                                hasDisk,
                                sezon,
                                tireCount,
                                startDate,
                                endDate,
                                totalPrice,
                                monthlyPrice,
                                reminderDate,
                                contractNumber,
                                storage,
                                trafficSource
                            ]
                        ]
                    })
                }
            );
            
            if (appendResponse.ok) {
                console.log('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            } else {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', await appendResponse.text());
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Google Sheets:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏ –∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ.');
    }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = () => {
    calculateDate();
    generateQRCode();

    const inputs = document.querySelectorAll('input, select');
    inputs.forEach(input => {
        input.addEventListener('input', generateQRCode);
        input.addEventListener('change', generateQRCode);
    });

    document.getElementById('showQrContent').addEventListener('click', () => {
        const qrContent = document.getElementById('qrContent');
        qrContent.style.display = qrContent.style.display === 'none' ? 'block' : 'none';
    });
};

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('tireCount').addEventListener('input', calculateDate);
document.getElementById('monthlyPrice').addEventListener('change', calculateTotal);
document.getElementById('startDate').addEventListener('change', calculateDate);
